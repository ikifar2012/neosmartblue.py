name: Test and Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
        
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Lint with ruff (if available)
      run: |
        poetry run python -m pip install ruff || echo "Ruff not available, skipping lint"
        poetry run ruff check . || echo "Ruff check completed"
      continue-on-error: true
      
    - name: Test with pytest (if available)
      run: |
        poetry run python -m pip install pytest || echo "Pytest not available, skipping tests"
        poetry run pytest || echo "No tests found or pytest not configured"
      continue-on-error: true
      
    - name: Build package
      run: poetry build
      
    - name: Check build artifacts
      run: |
        ls -la dist/
        poetry run python -m pip install twine
        poetry run twine check dist/*
